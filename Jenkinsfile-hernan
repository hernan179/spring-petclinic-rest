pipeline {
    agent any
    tools {
        maven 'maven3.8.8'
    }

    stages {
        stage('Build'){
            steps {
                echo 'Witout Checkout form jenkingsfile-hernan, implicited was done.. skiptest';
                //git 'https://github.com/hernan179/spring-petclinic-rest.git'
                 sh 'mvn clean install -DskipTests -B -ntp'
            }
        }
        /*stage('Testing'){
            steps {
                echo 'Testing';
                sh 'mvn test -B -ntp'
                
            }
            post {
                success {
                     echo 'executeing jacoco....';
                    jacoco()
                     echo 'executeing junit....';
                    junit 'target/surefire-reports/*.xml'
                }
                always {
                    echo 'Validation finished'
                }
                failure {
                    echo 'Error was out come in the processed...'
                }
            }

        }*/
        /*stage('Sonar'){
            steps  {
                echo 'Quality sonar..';
                withSonarQubeEnv('sonarqube') {
                  sh 'mvn clean package sonar:sonar'              
               }
            }
        }*/
        stage('Artifactory'){
            steps {
                echo 'Artifactory...saving';
                 script {
                    def pom = readMavenPom file: 'pom.xml'
                    println pom
                    
                    def server = Artifactory.server 'Artifactory'
                    def repository = 'spring-petclinic-rest'
                    
                     if("${GIT_BRANCH}" == 'origin/master'){
                        repository = repository + '-release'
                    } else {
                        repository = repository + '-snapshot'
                    }

                    def uploadSpec = """
                        {
                            "files": [
                                {
                                    "pattern": "target/.*.war",
                                    "target": "${repository}/${pom.groupId}/${pom.artifactId}/${pom.version}/",
                                    "regexp": "true"
                                }
                            ]
                        }
                    """
                    server.upload spec: uploadSpec
                 }
            }
        }
        stage('Deploy'){
            steps {
                echo 'Deploying... on jboss';
                
            }
        }
    }
}
